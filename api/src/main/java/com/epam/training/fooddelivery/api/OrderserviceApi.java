/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.epam.training.fooddelivery.api;

import com.epam.training.fooddelivery.model.CartModel;
import com.epam.training.fooddelivery.model.OrderModel;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-03T11:49:52.498212400+03:00[Europe/Bucharest]")
@Validated
@Api(value = "orderservice", description = "the orderservice API")
public interface OrderserviceApi {

    /**
     * GET /orderservice/orders : List of authenticated customer&#39;s orders
     *
     * @return List of authenticated customer&#39;s orders (status code 200)
     */
    @ApiOperation(value = "List of authenticated customer's orders", nickname = "orderserviceOrdersGet", notes = "", response = OrderModel.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of authenticated customer's orders", response = OrderModel.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orderservice/orders",
        produces = { "application/json" }
    )
    ResponseEntity<List<OrderModel>> orderserviceOrdersGet();


    /**
     * POST /orderservice/orders : The created order from the cart
     *
     * @param cartModel  (optional)
     * @return The created order from the cart (status code 200)
     *         or the cart is empty, balance of authenticated customer is not enough (status code 400)
     */
    @ApiOperation(value = "The created order from the cart", nickname = "orderserviceOrdersPost", notes = "", response = OrderModel.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The created order from the cart", response = OrderModel.class),
        @ApiResponse(code = 400, message = "the cart is empty, balance of authenticated customer is not enough") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/orderservice/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<OrderModel> orderserviceOrdersPost(@ApiParam(value = "") @Valid @RequestBody(required = false) CartModel cartModel);


    /**
     * GET /orderservice/orders/{orderId} : Order of the authenticated customer
     *
     * @param orderId The id of the order to retrieve (required)
     * @return Expected response to a valid request (status code 200)
     *         or the order exists but does not belong to the authenticated customer (status code 403)
     *         or the order does not exist (status code 404)
     */
    @ApiOperation(value = "Order of the authenticated customer", nickname = "showOrderById", notes = "", response = OrderModel.class, tags={ "orders", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = OrderModel.class),
        @ApiResponse(code = 403, message = "the order exists but does not belong to the authenticated customer"),
        @ApiResponse(code = 404, message = "the order does not exist") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orderservice/orders/{orderId}",
        produces = { "application/json" }
    )
    ResponseEntity<OrderModel> showOrderById(@ApiParam(value = "The id of the order to retrieve", required = true) @PathVariable("orderId") Integer orderId);

}
